# 克隆自聚宽文章：https://www.joinquant.com/post/4351
# 标题：【量化课堂】多回测运行和参数分析框架
# 作者：JoinQuant量化课堂

# 多因子选股模型
# 先导入所需要的程序包

import datetime
import numpy as np
import pandas as pd
import time
from jqdata import *
from pandas import Series, DataFrame
from jqfactor import get_factor_values


'''
================================================================================
总体回测前
================================================================================
'''

#总体回测前要做的事情
def initialize(context):
    set_params()    #1 设置策参数
    set_variables() #2 设置中间变量
    set_backtest()  #3 设置回测条件

#1 设置策略参数
def set_params():
    # 单因子测试时g.factor不应为空
    g.factor = 'size'        # 当前回测的单因子
    g.shift = 0           # 设置一个观测天数（天数）
    g.precent = 0.10       # 持仓占可选股票池比例
    g.index= '000906.XSHG'  # 定义股票池
    # 多因子合并称DataFrame，单因子测试时可以把无用部分删除提升回测速度
    # 定义因子以及排序方式，默认False方式为降序排列，原值越大sort_rank排序越小
    g.factors = {'BP': False, 'EP': False, 'PEG': False, 'DP': False, 
                 'CFP': False, 'PS': False, 'ALR': False, 'FACR': False, 
                 'CMC': False, 'ROE': False ,'ROA':False,'size':False
    }
    #$ 设定选取sort_rank： True 为最大，False 为最小
    g.sort_rank = True
    g.quantile = (90,100)

'''
000001.XSHG
上证指数
1991-07-15
SZZS
全部上市A股和B股
000002.XSHG
A股指数
1992-02-21
AGZS
全部上证A股
000003.XSHG
B股指数
1992-08-17
BGZS
全部上市B股
'''

#2 设置中间变量
def set_variables():
    g.feasible_stocks = []  # 当前可交易股票池
    g.if_trade = False      # 当天是否交易
    g.num_stocks = 0        # 设置持仓股票数目

def get_weights(context, index = '000906.XSHG'):
    today = context.current_dt.strftime('%Y-%m-%d')
    df = get_index_weights(index, date=today)
    return df

#3 设置回测条件
def set_backtest():
    set_benchmark('000906.XSHG')       # 设置为基准
    set_option('use_real_price', True) # 用真实价格交易
    log.set_level('order', 'error')    # 设置报错等级

#MAD: 中位数去极值
def filter_extreme_MAD(series,n):  
    median = series.quantile(0.5)
    new_median = ((series - median).abs()).quantile(0.5)
    max_range = median + n*new_median
    min_range = median - n*new_median
    return np.clip(series,min_range,max_range)

#标准化函数：
def standardize(s,ty=2):
    '''
    s为Series数据
    ty为标准化类型:1 MinMax,2 Standard,3 maxabs 
    '''
    data=s.dropna().copy()
    if int(ty)==1:
        re = (data - data.min())/(data.max() - data.min())
    elif ty==2:
        std = data.std()
        if std==0:
            std = 1
        re = (data - data.mean())/std
    elif ty==3:
        re = data/10**np.ceil(np.log10(data.abs().max()))
    return re




'''
================================================================================
每天开盘前
================================================================================
'''
#每天开盘前要做的事情
def before_trading_start(context):
    # 获得当前日期
    day = context.current_dt.day
    yesterday = context.previous_date
    rebalance_day = shift_trading_day(yesterday, 1)
    if yesterday.month != rebalance_day.month:
        if yesterday.day > rebalance_day.day:
            g.if_trade = True 
            #5 设置可行股票池：获得当前开盘的股票池并剔除当前或者计算样本期间停牌的股票
            g.feasible_stocks = set_feasible_stocks(get_index_stocks(g.index), g.shift,context)
    		#6 设置手续费与手续费
            set_slip_fee(context)
            # 购买股票为可行股票池对应比例股票
            g.num_stocks = int(len(g.feasible_stocks)*g.precent)

#4
# 某一日的前shift个交易日日期 
# 输入：date为datetime.date对象(是一个date，而不是datetime)；shift为int类型
# 输出：datetime.date对象(是一个date，而不是datetime)
def shift_trading_day(date,shift):
    # 获取所有的交易日，返回一个包含所有交易日的 list,元素值为 datetime.date 类型.
    tradingday = get_all_trade_days()
    # 得到date之后shift天那一天在列表中的行标号 返回一个数
    shiftday_index = list(tradingday).index(date)+shift
    # 根据行号返回该日日期 为datetime.date类型
    return tradingday[shiftday_index]

#5    
# 设置可行股票池
# 过滤掉当日停牌的股票,且筛选出前days天未停牌股票
# 输入：stock_list为list类型,样本天数days为int类型，context（见API）
# 输出：list=g.feasible_stocks
def set_feasible_stocks(stock_list,days,context):
    # 得到是否停牌信息的dataframe，停牌的1，未停牌得0
    suspened_info_df = get_price(list(stock_list), 
                       start_date=context.current_dt, 
                       end_date=context.current_dt, 
                       frequency='daily', 
                       fields='paused'
    )['paused'].T
    # 过滤停牌股票 返回dataframe
    unsuspened_index = suspened_info_df.iloc[:,0]<1
    # 得到当日未停牌股票的代码list:
    unsuspened_stocks = suspened_info_df[unsuspened_index].index
    
    return unsuspened_stocks
    
#6 根据不同的时间段设置滑点与手续费
def set_slip_fee(context):
    # 将滑点设置为0
    set_slippage(FixedSlippage(0)) 
    # 根据不同的时间段设置手续费
    dt=context.current_dt
    
    if dt>datetime.datetime(2013,1, 1):
        set_commission(PerTrade(buy_cost=0.0003, 
                                sell_cost=0.0013, 
                                min_cost=5)) 
        
    elif dt>datetime.datetime(2011,1, 1):
        set_commission(PerTrade(buy_cost=0.001, 
                                sell_cost=0.002, 
                                min_cost=5))
            
    elif dt>datetime.datetime(2009,1, 1):
        set_commission(PerTrade(buy_cost=0.002, 
                                sell_cost=0.003, 
                                min_cost=5))
                
    else:
        set_commission(PerTrade(buy_cost=0.003, 
                                sell_cost=0.004, 
                                min_cost=5))
'''
================================================================================
每天交易时
================================================================================
'''
def handle_data(context,data):
	# 如果为交易日
    if g.if_trade == True: 
	    #7 获得买入卖出信号，输入context，输出股票列表list
	    # 字典中对应默认值为false holding_list筛选为true，则选出因子得分最大的
        holding_list = get_stocks(g.feasible_stocks, 
                                context,
                                asc = g.sort_rank)
        # 新加入的部分，计算holding_list长度
        total_number = len(holding_list)
        #print(total_number)
        # print 'feasible_stocks is %d, holding is %d' %(len(g.feasible_stocks), total_number)
        # 提取需要的分位信息
        (start_q, end_q) =  g.quantile
        #print(holding_list)
        #8 重新调整仓位，输入context,使用信号结果holding_list
        rebalance(context, holding_list, start_q, end_q, total_number)
    g.if_trade = False

#7 原始数据重提取因子打分排名
def get_stocks(stocks_list, context, asc):
    #   构建一个新的字符串，名字叫做 'get_df_'+ 'key'
    tmp='get_df' + '_' + g.factor
    # 声明字符串是个方程
    aa = globals()[tmp](stocks_list, context, g.factors[g.factor])
    score = g.factor + '_' + 'sorted_rank'
    stocks = list(aa.sort_values(score, ascending = asc).index)
    #print(stocks)
    return stocks

#8
# 依本策略的买入信号，得到应该买的股票列表
# 借用买入信号结果，不需额外输入
# 输入：context（见API）

# 等权调仓
def rebalance(context, holding_list, start_q, end_q, total_number):
    if end_q == 100:
        end_q = 100
    start = int(start_q * total_number / 100)
    end = int(end_q * total_number / 100)
    # 每只股票购买金额
    every_stock = context.portfolio.portfolio_value/g.num_stocks
    # 空仓只有买入操作
    if len(list(context.portfolio.positions.keys()))==0:
        # 原设定重scort始于回报率相关打分计算，回报率是升序排列
        for stock_to_buy in holding_list[start : end]: 
            order_target_value(stock_to_buy, every_stock)
    else :
        # 不是空仓先卖出持有但是不在购买名单中的股票
        for stock_to_sell in list(context.portfolio.positions.keys()):
            if stock_to_sell not in holding_list[start : end]:
                order_target_value(stock_to_sell, 0)
        # 因order函数调整为顺序调整，为防止先行调仓股票由于后行调仓股票占金额过大不能一次调整到位，这里运行两次以解决这个问题
        for stock_to_buy in holding_list[start : end]: 
            order_target_value(stock_to_buy, every_stock)
        for stock_to_buy in holding_list[start : end]: 
            order_target_value(stock_to_buy, every_stock)


# 根据指数的权重调仓
# def rebalance(context, holding_list, start_q, end_q, total_number):
#     df = get_weights(context)
#     if end_q == 100:
#         end_q = 100
#     start = int(start_q * total_number / 100)
#     end = int(end_q * total_number / 100)
#     # 每只股票购买金额
#     value = context.portfolio.portfolio_value
#     weight_mean = np.nanmean(df.loc[holding_list[start : end],'weight'])
#     weight = df.loc[holding_list[start : end],'weight']
#     weight = weight.fillna(weight_mean)
#     weight = weight / np.nansum(weight)
#     #print(weight)
#     # 空仓只有买入操作
#     if len(list(context.portfolio.positions.keys()))==0:
#         # 原设定重scort始于回报率相关打分计算，回报率是升序排列
#         for stock_to_buy in holding_list[start : end]: 
#             if stock_to_buy in weight.index:
#                 order_target_value(stock_to_buy, value * weight[stock_to_buy])
#     else :
#         # 不是空仓先卖出持有但是不在购买名单中的股票
#         for stock_to_sell in list(context.portfolio.positions.keys()):
#             if stock_to_sell not in holding_list[start : end]:
#                 order_target_value(stock_to_sell, 0)
#         # 因order函数调整为顺序调整，为防止先行调仓股票由于后行调仓股票占金额过大不能一次调整到位，这里运行两次以解决这个问题
#         for stock_to_buy in holding_list[start : end]: 
#             if stock_to_buy in weight.index:
#                 order_target_value(stock_to_buy, value * weight[stock_to_buy])
#         for stock_to_buy in holding_list[start : end]: 
#             if stock_to_buy in weight.index:
#                 order_target_value(stock_to_buy, value * weight[stock_to_buy])


'''
================================================================================
因子计算函数
================================================================================
'''

    
# 12size
def get_df_size(stock_list, context, asc):
    df_size_dict = get_factor_values(list(stock_list),factors = ['size'], end_date=context.previous_date, count=1)
    # 删除nan，以备数据中某项没有产生nan
    df_size = df_size_dict['size'].T
    df_size.columns = ['size']
    df_size = df_size[pd.notnull(df_size['size'])]
    df_size['size'] = filter_extreme_MAD(df_size['size'],3)
    df_size['size'] = standardize(df_size['size'],ty=2)
    # 生成排名序数
    df_size['size_sorted_rank'] = df_size['size'].rank(ascending = True, method = 'dense')
    return df_size


'''
================================================================================
每天收盘后
================================================================================
'''
# 每日收盘后要做的事情（本策略中不需要）
def after_trading_end(context):
    return